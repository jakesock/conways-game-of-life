{"version":3,"sources":["components/Cell.jsx","components/Grid.jsx","hooks/useRunSimulation.jsx","components/Actions.jsx","App.jsx","index.jsx"],"names":["Cell","grid","setGrid","row","col","size","onClick","newGrid","produce","gridCopy","style","width","height","backgroundColor","border","Grid","numCols","gridSize","columnWidth","className","display","gridTemplateColumns","map","rows","rowIdx","colIdx","operations","Actions","numRows","generateEmptyGrid","useState","running","setRunning","runningRef","useRef","current","runSimulation","ref","useCallback","neighbors","forEach","x","y","newRow","newCol","setTimeout","useRunSimulation","role","aria-label","i","push","Array","from","Math","random","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fbee9f56.chunk.js","sourcesContent":["import produce from 'immer';\n\nconst Cell = ({ grid, setGrid, row, col, size }) => {\n  const handleCellClick = () => {\n    const newGrid = produce(grid, (gridCopy) => {\n      gridCopy[row][col] = grid[row][col] ? 0 : 1;\n    });\n    setGrid(newGrid);\n  };\n\n  return (\n    <div\n      onClick={handleCellClick}\n      style={{\n        width: size,\n        height: size,\n        backgroundColor: grid[row][col] ? '#2DB875' : '#F7F8FC',\n        border: 'solid 1px #3E4A56',\n      }}\n    />\n  );\n};\n\nexport default Cell;\n","import './Grid.css';\nimport Cell from './Cell';\n\nconst Grid = ({ grid, setGrid, numCols, gridSize }) => {\n  const columnWidth = gridSize / numCols;\n\n  return (\n    <div className=\"Grid-container\">\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, ${columnWidth}px)`,\n        }}\n      >\n        {grid.map((rows, rowIdx) =>\n          rows.map((col, colIdx) => (\n            <Cell\n              key={`${rowIdx}-${colIdx}`}\n              grid={grid}\n              setGrid={setGrid}\n              row={rowIdx}\n              col={colIdx}\n              size={gridSize / numCols}\n            />\n          )),\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;\n","import { useCallback } from 'react';\nimport produce from 'immer';\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [-1, 1],\n  [-1, 0],\n  [-1, -1],\n];\n\nexport const useRunSimulation = (numRows, numCols, setGrid, ref) => {\n  const runSimulation = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    setGrid((grid) => {\n      return produce(grid, (gridCopy) => {\n        for (let row = 0; row < numRows; row++) {\n          for (let col = 0; col < numCols; col++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newRow = row + x;\n              const newCol = col + y;\n              if (\n                newRow >= 0 &&\n                newRow < numRows &&\n                newCol >= 0 &&\n                newCol < numCols\n              ) {\n                neighbors += grid[newRow][newCol];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[row][col] = 0;\n            } else if (grid[row][col] === 0 && neighbors === 3) {\n              gridCopy[row][col] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, [numRows, numCols, setGrid, ref]);\n\n  return runSimulation;\n};\n","import './Actions.css';\nimport React, { useState, useRef } from 'react';\nimport { useRunSimulation } from '../hooks/useRunSimulation';\n\nconst Actions = ({ numRows, numCols, setGrid, generateEmptyGrid }) => {\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useRunSimulation(numRows, numCols, setGrid, runningRef);\n\n  const handleStartStopClick = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  const handleRandomClick = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => (Math.random() > 0.65 ? 1 : 0)));\n    }\n    setGrid(rows);\n  };\n\n  const clear = () => {\n    if (running) setRunning(false);\n    setGrid(generateEmptyGrid());\n  };\n\n  return (\n    <div className=\"Actions\">\n      <div className=\"btn-group\" role=\"group\" aria-label=\"Action Buttons\">\n        <button\n          className={`btn ${running ? 'btn-danger' : 'btn-primary'}`}\n          onClick={handleStartStopClick}\n        >\n          {running ? 'Stop Simulation' : 'Start Simulation'}\n        </button>\n        <button className=\"btn btn-primary\" onClick={handleRandomClick}>\n          Random Pattern\n        </button>\n        <button className=\"btn btn-primary\" onClick={clear}>\n          Clear Board\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Actions;\n","import './App.css';\nimport { useState } from 'react';\nimport Grid from './components/Grid';\nimport Actions from './components/Actions';\n\nconst numRows = 30;\nconst numCols = 30;\nconst gridSize = 800;\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nconst App = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  return (\n    <div className=\"App\">\n      <Actions\n        numRows={numRows}\n        numCols={numCols}\n        setGrid={setGrid}\n        generateEmptyGrid={generateEmptyGrid}\n      />\n      <Grid\n        grid={grid}\n        setGrid={setGrid}\n        numRows={numRows}\n        numCols={numCols}\n        gridSize={gridSize}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import 'bootswatch/dist/litera/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}
{"version":3,"sources":["App.jsx","index.jsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","document","querySelector"],"mappings":"wKAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBF,GAgBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBT,KAgByB,kBAAM,MAG7C,OAAOH,GA4GMK,EAzGH,WAAO,IAAD,EACQC,oBAAS,WAC/B,OAAOP,OAFO,mBACTQ,EADS,KACHC,EADG,OAKcF,oBAAS,GALvB,mBAKTG,EALS,KAKAC,EALA,KAOVC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA9Cf,IA8CiCC,GAAQ,GAAKA,EA7C9C,KA8CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAI,EAAGA,EAxCV,GAwCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EAxCR,GAwCqBA,IAAM,EAA1BA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,qCACE,wBACEa,QAAS,WACPjB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SASGL,EAAU,OAAS,UAEtB,wBACEkB,QAAS,WAEP,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EAhFV,GAgFuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAjFT,KAiFyB,kBAAOyB,KAAKC,SAAW,GAAM,EAAI,MAIhErB,EAAQR,IATZ,oBAcA,wBACE2B,QAAS,WACPnB,EAAQT,MAFZ,mBAOA,qBACE+B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OApGb,GAoGa,YAHvB,SAMGzB,EAAK0B,KAAI,SAACjC,EAAMC,GAAP,OACRD,EAAKiC,KAAI,SAACC,EAAKf,GAAN,OACP,qBAEEQ,QAAS,WACP,IAAMQ,EAAUlB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQ2B,IAEVL,MAAO,CACLM,MAAO,GACPC,OAAQ,GACRC,gBAAiB/B,EAAKN,GAAGkB,GAAK,YAASoB,EACvCC,OAAQ,oBAZZ,UACUvC,EADV,YACekB,gBCzG3BsB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.e0cba46e.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n      >\n        {running ? 'stop' : 'start'}\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)),\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        random\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        clear\n      </button>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? 'pink' : undefined,\n                border: 'solid 1px black',\n              }}\n            />\n          )),\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}